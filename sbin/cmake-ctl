#!/usr/bin/env bash

[[ -d ~/.bashmatic ]] || git clone https://github.com/kigster/bashmatic ~/.bashmatic

source ~/.bashmatic/init.sh

export script=$(basename $0)
export arch=$(uname -m)
export LD_LIBRARY_PATH=$(pwd)/lib

# Supporting

function OS::Customization::ubuntu() {
  # remove -stdlib flag for clang compilers
  find . -name '*.txt' | xargs sed -i '' -e 's/-stdlib=libc++//g'
}

# Actions

function Actions::setup() {
  Actions::clean

  run "git submodule init"
  run "git submodule update"
  run "mkdir -p build"
}

function Actions::compile() {
  [[ -d build ]] || Actions::setup
  run "cd build && cmake .."
  run::set-next show-output-on
  run "make -j 16"
  run "make install"
  run "cd .. "
}

function Actions::run() {
  local target="$1"
  
  h1 "Please remmeber to set ${bldylw}LD_LIBRARY_PATH${clr} to ${bldgrn}${LD_LIBRARY_PATH}"
  echo

  # now run the tests and the command
  for binary in $(find bin -type f -perm -111); do
    [[ -n ${target} && "${target}" != "$(basename ${binary})" ]] && continue

    run::set-next show-output-on
    hl::subtle "Running ${binary}..."
    run "${binary}"
  done
}

function Actions::link() {
  Actions::link-binaries
  Actions::link-libraries
}

function Actions::link-binaries() {
  # binaries
  for file in $(find ./bin -perm 755); do
    run "ln -nfs ${file/\/bin/} bin/$(basename ${file})"
  done
}

function Actions::link-libraries() {
  # libraries
  for file in $(find . -name 'lib*' -type f); do
    run "ln -nfs $(pwd)${file/\./} lib/$(basename ${file})"
  done
}

function Actions::clean() {
  run "rm -rf bin lib include build"
}

function Actions::usage() {
  printf "
${bldgrn}USAGE${clr}
  ${bldylw}${script} [ action ] ${clr}

${bldgrn}EG: ${clr}
  ${bldylw}${script} [ $(array-piped ${actions[@]}) ] ${clr}

${bldgrn}DESCRIPTION  ${clr}
  Builds and runs project and it's tests.

"
}

function Actions::all() {
  run::set-all abort-on-error
  Actions::clean
  Actions::setup
  Actions::compile

  local os=(uname -s)
  local func="OS::Customization::${os}"
  [[ -n $(type ${func} 2>/dev/null) ]] && ${func}

  Actions::link
  Actions::run
}

declare -a actions=(  $(lib::util::functions-matching 'Actions::') )

# Parse additional flags
while :; do
  case $1 in
    -h|-\?|--help)
      shift
      usage
      exit 0
      ;;
    --) # End of all options; anything after will be passed to the action function
      shift
      break
      ;;
    -?*)
      printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
      exit 127
      shift
      ;;
    *)
      [[ -z "$1" ]] && break
      [[ -n "$1" ]] && { action="$1"; shift; }
      break
      ;;
  esac
done

[[ -z ${action} ]] && action="usage"

lib::array::contains-element "${action}" "${actions[@]}" || {
  error "Action is not valid: ${action}" "Allowed actions are: $(array-csv "${actions[@]}")"
  exit 1
}

Actions::${action} "$@"
